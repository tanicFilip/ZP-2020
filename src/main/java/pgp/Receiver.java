package pgp;

import org.apache.log4j.BasicConfigurator;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import pgp.exceptions.InvalidSignatureException;
import pgp.utils.DataReadUtils;
import pgp.utils.DataWriteUtils;
import pgp.utils.KeyRingUtils;
import pgp.utils.PGPUtils;

import java.nio.charset.Charset;
import java.security.Security;
import java.util.Iterator;
import java.util.Objects;

public class Receiver {
    private static final String email = "reciever@mail.com";
    private static final String receivedMessageFileName = "receivedMessage.txt";
    private static final String receivedSignedMessageFileName = "receivedSignedMessage.txt";

    private static final Logger logger = LoggerFactory.getLogger(Sender.class);

    public static PGPUtils pgpUtils = new PGPUtils();
    public static KeyRingUtils keyRingUtils = new KeyRingUtils();

    public static void configureLogging(){
        BasicConfigurator.configure();
    }

    public static void initSecurityProvider(){
        Security.addProvider(new BouncyCastleProvider());
    }

    public static void main(String[] args) throws Exception {

        initSecurityProvider();
        configureLogging();

        logger.info("Adding public key rings to the collection...");
        // some hardcoded filenames generated by sender
        keyRingUtils.addPublicKeyToPublicKeyRingCollection(email, "marko@marko.com_-154724278.txt");
        keyRingUtils.addPublicKeyToPublicKeyRingCollection(email, "marko@marko.com_889672620.txt");
        keyRingUtils.addPublicKeyToPublicKeyRingCollection(email, "marko@marko.com_191179442.txt");
        keyRingUtils.addPublicKeyToPublicKeyRingCollection(email, "marko@marko.com_-1678648022.txt");
        keyRingUtils.addPublicKeyToPublicKeyRingCollection(email, "marko@marko.com_-1340597773.txt");
        keyRingUtils.addPublicKeyToPublicKeyRingCollection(email, "marko@marko.com_-2059078544.txt");
        logger.info("Added public key rings to the collection.");

        logger.info("Getting public rings...");
        var publicKeyRingCollection = keyRingUtils.readPublicKeyRingCollectionFromFile(email);
        logger.info("Read public key rings.");

        logger.info("Decrypting message...");
        pgpUtils.readEncryptedFile(receivedSignedMessageFileName, Sender.encodedOutputFileName, Sender.password);
        logger.info("Decrypted message.");

        byte[] message = null;
        Iterator<PGPPublicKeyRing> iterator = publicKeyRingCollection.iterator();
        while(iterator.hasNext()){
            PGPPublicKey key = iterator.next().getPublicKey();

            try{
                logger.info("Verifying signed message...");
                message = pgpUtils.readSignedMessage(DataReadUtils.readBytesFromFile(receivedSignedMessageFileName), key);
                logger.info("Verified signed message");
            }catch(InvalidSignatureException e){
                logger.warn("Failed to decrypt the message. Error message: {}", e.getMessage());
            }
        }
        if(Objects.isNull(message))
            throw new Exception("Well this one was unexpected :(");

        String messageString = new String(message,Charset.defaultCharset());
        logger.info("Received message: {}", messageString);

        DataWriteUtils.writeBytesToFile(message, receivedMessageFileName);


    }

}
